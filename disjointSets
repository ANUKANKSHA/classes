class disjointSets
{
    int *arr;
    int *size;
    int N,M;

public:

    disjointSets()
    {
        cin>>N;
        cin>>M;
        arr=new int[N];
        size=new int[M];
        for(int i=0;i<N;i++)
        {
            arr[i]=i;
            size[i]=1;
        }
    }


    int root(int A)
    {
        int i=A;
        while(arr[i]!=i)
            {
                arr[i]=arr[arr[i]];
                i=arr[i];
            }
        return i;
    }

    bool find(int A,int B)
    {
        int root_A=root(A);
        int root_B=root(B);
        if(root_A==root_B)
            return true;
        else
            return false;
    }

    void union_(int A,int B)
    {
        int root_A=root(A);
        int root_B=root(B);
        if(root_A==root_B)
        return;
        if(size[A]>=size[B])
        {
            arr[root_B]=arr[root_A];
            size[root_A]+=size[root_B];
        }
         else if(size[A]<size[B])
        {
            arr[root_A]=arr[root_B];
            size[root_B]+=size[root_A];
        }

    }

};
