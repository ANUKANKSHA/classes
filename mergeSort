class mergeSort
{
    int array_size;
    int *arr;
public:
    mergeSort(int x,int a[])
    {
        array_size=x;
        arr=new int[array_size];
        for(int i=0;i<array_size;i++)
        {
            arr[i]=a[i];
        }
    }
    merge(int low,int mid,int high)
    {
        int l[mid-low+1];
        int r[high-mid];
        for(int p=0;p<mid-low+1;p++)
            l[p]=arr[low+p];
        for(int p=0;p<high-mid;p++)
            r[p]=arr[mid+1+p];
        int i=0,j=0,k=low;
        while(i<mid-low+1 && j<high-mid)
        {
            if(l[i]<=r[j])
            {
                arr[k]=l[i];
                i++;
            }
            else
            {
                arr[k]=r[j];
                j++;
            }
            k++;
        }
        while(i<mid-low+1)
        {
            arr[k]=l[i];
                i++;
                k++;
        }
        while(j<high-mid)
        {
            arr[k]=r[j];
                j++;
                k++;
        }
    }
    void partition(int low,int high)
    {
        if(low<high)
        {
            int mid=(low+high)/2;
            partition(low,mid);
            partition(mid+1,high);
            merge(low,mid,high);
        }
    }
    void display()
    {
        cout<<"the sorted array is"<<endl;
        for(int i=0;i<array_size;i++)
        {
            cout<<" "<<arr[i];
        }
    }

};
