class max_priority_queue
{
    int N,Q;
    vector<int> arr;
public:
   max_priority_queue()
    {
        cin>>N;
        int x;
        for(int i=0;i<N;i++)
            {
                cin>>x;
                arr.push_back(x);
            }
        build_maxHeap();
       solve();
    }

    void max_heapify(int i,int X)
    {
        int left=2*i+1;
        int right=2*i+2;
        int largest;
        if(left<X && arr[left]>arr[i])
            largest=left;
        else
            largest=i;
        if(right<X && arr[right]>arr[largest])
            largest=right;
        if(largest!=i)
        {
            int temp=arr[largest];
            arr[largest]=arr[i];
            arr[i]=temp;
            max_heapify(largest,X);
        }
    }
    void build_maxHeap()
    {
        for(int i=(N/2)-1;i>=0;i--)
        {
            max_heapify(i,N);
        }

    }
    void maximum()
    {
        cout<<arr[0]<<endl;
    }
    void extractMaximum()
    {
        if(arr.size()==0)
        {
            return;
        }
        int last=arr.back();
        arr[0]=last;
        arr.pop_back();
        max_heapify(0,arr.size());
        cout<<arr[0]<<endl;
    }
    void increase_val(int i,int val)
    {
        if(arr[i]>val)
        {
           
            return;
        }
        arr[i]=val;
        while(arr[(i-1)/2]<val)
        {
            int temp=arr[(i-1)/2];
            arr[(i-1)/2]=val;
            arr[i]=temp;
            i=(i-1)/2;
        }
    }
    void insert_val(int val)
    {
        arr.push_back(-1);
        increase_val(arr.size()-1,val);
    }
    void display()
    {
            for(int i=0;i<arr.size();i++)
                cout<<arr[i]<<" ";
    }
};
